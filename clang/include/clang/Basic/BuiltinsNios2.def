//===-- BuiltinsNios2.def - Nios2 Builtin function database --------*- C++ -*-==//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines the Nios2-specific builtin function database. Users of
// this file must define the BUILTIN macro to make use of this information.
//
//===----------------------------------------------------------------------===//

// The format of this database matches clang/Basic/Builtins.def.

#if defined(BUILTIN) && !defined(TARGET_BUILTIN)
#   define TARGET_BUILTIN(ID, TYPE, ATTRS, FEATURE) BUILTIN(ID, TYPE, ATTRS)
#endif

// Nios2 R1 builtins:

//int __builtin_ldbio(volatile const void *);
BUILTIN(__builtin_ldbio, "ivDC*", "")
//int __builtin_ldbuio(volatile const void *);
BUILTIN(__builtin_ldbuio, "ivDC*", "")
//int __builtin_ldhio(volatile const void *);
BUILTIN(__builtin_ldhio, "ivDC*", "")
//int __builtin_ldhuio(volatile const void *);
BUILTIN(__builtin_ldhuio, "ivDC*", "")
//int __builtin_ldwio(volatile const void *);
BUILTIN(__builtin_ldwio, "ivDC*", "")
//int __builtin_ldwuio(int);
BUILTIN(__builtin_ldwuio, "ii", "")
// int __builtin_rdctl(int);
BUILTIN(__builtin_rdctl, "iIi", "")
// void __builtin_wrctl(int, int);
BUILTIN(__builtin_wrctl, "vIii", "")
// int __builtin_rdprs(int, int);
BUILTIN(__builtin_rdprs, "iii", "")
//void __builtin_stbio(volatile void *, int);
BUILTIN(__builtin_stbio, "vvD*i", "")
//void __builtin_sthio(volatile void *, int);
BUILTIN(__builtin_sthio, "vvD*i", "")
//void __builtin_stwio(volatile void *, int);
BUILTIN(__builtin_stwio, "vvD*i", "")
//void __builtin_sync(void);
BUILTIN(__builtin_sync, "v", "")
// void __builtin_flushd(volatile void *);
BUILTIN(__builtin_flushd, "vvD*", "")
// void __builtin_flushda(volatile void *);
BUILTIN(__builtin_flushda, "vvD*", "")

// void* nios2_memcpy_l4_to_device(void *dev_dst, void *l4_src, size_t n);
// copies data from L4 memory to L3/L2
// - returns: the destination pointer
// - param1: the destination pointer (must be within L2 or L3)
// - param2: the source pointer (must be within L4)
// - param3: the number of bytes to copy; copied chunk must fit entirely into
//             single memory level
BUILTIN(__builtin_nios2_memcpy_l4_to_device, "v*v*v*z", "")

// void* nios2_memcpy_l4_to_device(void *l4_dst, void *dev_src, size_t n);
// copies data from L3/L2 to L4 memory
// - returns: the destination pointer
// - param1: the destination pointer (must be within L4)
// - param2: the source pointer (must be within L2 or L3)
// - param3: the number of bytes to copy; copied chunk must fit entirely into
//             single memory level
BUILTIN(__builtin_nios2_memcpy_device_to_l4, "v*v*v*z", "")

// void nios_abort(int errcode);
BUILTIN(__builtin_nios_abort, "vi", "")
// size_t nios_get_free_l2_mem_size (void);
BUILTIN(__builtin_nios_get_free_l2_mem_size, "z", "")
// size_t nios_get_free_l3_mem_size (void);
BUILTIN(__builtin_nios_get_free_l3_mem_size, "z", "")
// void * nios2_unsafe_malloc_l2 (size_t size, int align);
BUILTIN(__builtin_nios2_unsafe_malloc_l2, "v*zi", "")
// void nios2_unsafe_free_l2 (void * ptr);
BUILTIN(__builtin_nios2_unsafe_free_l2, "vv*", "")

// Nios2 R2 builtins:

// int __builtin_wrpie(int);
TARGET_BUILTIN(__builtin_wrpie, "ii", "", "nios2r2mandatory")
// void __builtin_eni(int);
TARGET_BUILTIN(__builtin_eni, "vi", "", "nios2r2mandatory")
// int __builtin_ldex(volatile const void *);
TARGET_BUILTIN(__builtin_ldex, "ivDC*", "", "nios2r2mandatory")
// int __builtin_stex(volatile void *, int);
TARGET_BUILTIN(__builtin_stex, "ivD*i", "", "nios2r2mandatory")
// int __builtin_ldsex(volatile const void *);
TARGET_BUILTIN(__builtin_ldsex, "ivDC*", "", "nios2r2mpx")
// int __builtin_stsex(volatile void *, int);
TARGET_BUILTIN(__builtin_stsex, "ivDC*i", "", "nios2r2mpx")

#undef BUILTIN
#undef TARGET_BUILTIN
