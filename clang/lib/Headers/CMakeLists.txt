# INTEL_CUSTOMIZATION
# INTEL_HEADERS is a list of Intel-added header files located
# in llvm/tools/clang/lib/Headers/Intel_Headers.
# We handle these files in a special way:
#   - During the build, these files are copied to the headers destination
#     directory in the build structure without creation of Intel_Headers
#     directory in the build structure.
#     For example, Intel_Headers/core/newcorefunc.h will be
#     copied into <build-headers>/core/newcorefunc.h
#   - They are installed for clang-headers component without
#     creation of Intel_Headers directory.
#   - They are installed for icx-headers component without
#     creation of Intel_Headers directory.
# Such a handling allows having Intel-added header files in the repository
# with "Intel_" name in their path, as required by Xmain development process,
# and having the same files with their natural naming for compiler packages
# in the build and deploy structures
#
# For example, we add Intel_Headers/newisaintrin.h into the repository
# and add "#include <newisaintrin.h>" in immintrin.h - this will work
# due to the copying hapenning during build/install.
#
# If you have <pwd>/Intel_Headers/newheader.h, you must add it into
# INTEL_HEADERS as Intel_Headers/newheader.h
# If you have <pwd>/Intel_newheader.h, you may put it into the 'files'
# list below, or into INTEL_HEADERS as Intel_newheader.h, but in this case
# it will be copied without special handling for Intel_Headers directory.
#
# For more examples, please, read Intel_Headers/README.txt.
set(INTEL_HEADERS)
# INTEL_FEATURE_ISA_BF16
intel_add_file(INTEL_HEADERS
  FEATURE ${LLVM_INTELFEATURE_PREFIX}_ISA_BF16
  intel_avx512bf16intrin.h
  intel_avx512vlbf16intrin.h
  )
# end INTEL_FEATURE_ISA_BF16
# INTEL_FEATURE_ISA_SERIALIZE
intel_add_file(INTEL_HEADERS
  FEATURE ${LLVM_INTELFEATURE_PREFIX}_ISA_SERIALIZE
  Intel_Headers/serializeintrin.h
  )
# end INTEL_FEATURE_ISA_SERIALIZE
# end INTEL_CUSTOMIZATION

# INTEL_CUSTOMIZATION
# INTEL_FEATURE_ISA_AMX
intel_add_file(INTEL_HEADERS
  FEATURE ${LLVM_INTELFEATURE_PREFIX}_ISA_AMX
  Intel_amxintrin.h
  )
# end INTEL_FEATURE_ISA_AMX
# end INTEL_CUSTOMIZATION

set(files
  adxintrin.h
  altivec.h
  ammintrin.h
  arm_acle.h
  armintr.h
  arm64intr.h
  avx2intrin.h
  avx512bwintrin.h
  avx512bitalgintrin.h
  avx512vlbitalgintrin.h
  avx512cdintrin.h
  avx512vpopcntdqintrin.h
  avx512dqintrin.h
  avx512erintrin.h
  avx512fintrin.h
  avx512ifmaintrin.h
  avx512ifmavlintrin.h
  avx512pfintrin.h
  avx512vbmiintrin.h
  avx512vbmivlintrin.h
  avx512vbmi2intrin.h
  avx512vlvbmi2intrin.h
  avx512vlbwintrin.h
  avx512vlcdintrin.h
  avx512vldqintrin.h
  avx512vlintrin.h
  avx512vpopcntdqvlintrin.h
  avx512vnniintrin.h
  avx512vlvnniintrin.h
  avxintrin.h
  bmi2intrin.h
  bmiintrin.h
  __clang_cuda_builtin_vars.h
  __clang_cuda_cmath.h
  __clang_cuda_complex_builtins.h
  __clang_cuda_device_functions.h
  __clang_cuda_intrinsics.h
  __clang_cuda_libdevice_declares.h
  __clang_cuda_math_forward_declares.h
  __clang_cuda_runtime_wrapper.h
  cetintrin.h
  cldemoteintrin.h
  clzerointrin.h
  cpuid.h
  clflushoptintrin.h
  clwbintrin.h
  emmintrin.h
  f16cintrin.h
  float.h
  fma4intrin.h
  fmaintrin.h
  fxsrintrin.h
  gfniintrin.h
  htmintrin.h
  htmxlintrin.h
  ia32intrin.h
  immintrin.h
  intrin.h
  inttypes.h
  invpcidintrin.h
  iso646.h
  limits.h
  lwpintrin.h
  lzcntintrin.h
  mm3dnow.h
  mmintrin.h
  mm_malloc.h
  module.modulemap
  movdirintrin.h
  msa.h
  mwaitxintrin.h
  nmmintrin.h
# INTEL_CUSTOMIZATION
  opencl-c-20.h
  opencl-c-common.h
  opencl-c-platform-12.h
  opencl-c-platform-20.h
  opencl-c-platform.h
# end INTEL_CUSTOMIZATION
  opencl-c.h
  pkuintrin.h
  pmmintrin.h
  pconfigintrin.h
  popcntintrin.h
  prfchwintrin.h
  ptwriteintrin.h
  rdseedintrin.h
  rtmintrin.h
  sgxintrin.h
  s390intrin.h
  shaintrin.h
  smmintrin.h
  stdalign.h
  stdarg.h
  stdatomic.h
  stdbool.h
  stddef.h
  __stddef_max_align_t.h
  stdint.h
  stdnoreturn.h
# INTEL_CUSTOMIZATION
  svmlintrin.h
# end INTEL_CUSTOMIZATION
  tbmintrin.h
  tgmath.h
  tmmintrin.h
  unwind.h
  vadefs.h
  vaesintrin.h
  varargs.h
  vecintrin.h
  vpclmulqdqintrin.h
  waitpkgintrin.h
  wbnoinvdintrin.h
  wmmintrin.h
  __wmmintrin_aes.h
  __wmmintrin_pclmul.h
  x86intrin.h
  xmmintrin.h
  xopintrin.h
  xsavecintrin.h
  xsaveintrin.h
  xsaveoptintrin.h
  xsavesintrin.h
  xtestintrin.h
  )

set(cuda_wrapper_files
  cuda_wrappers/algorithm
  cuda_wrappers/complex
  cuda_wrappers/new
)

set(output_dir ${LLVM_LIBRARY_OUTPUT_INTDIR}/clang/${CLANG_VERSION}/include)

# Generate arm_neon.h
clang_tablegen(arm_neon.h -gen-arm-neon
  -I ${CLANG_SOURCE_DIR}/include/clang/Basic/
  SOURCE ${CLANG_SOURCE_DIR}/include/clang/Basic/arm_neon.td)
# Generate arm_fp16.h
clang_tablegen(arm_fp16.h -gen-arm-fp16
  -I ${CLANG_SOURCE_DIR}/include/clang/Basic/
  SOURCE ${CLANG_SOURCE_DIR}/include/clang/Basic/arm_fp16.td)

set(out_files)
foreach( f ${files} ${cuda_wrapper_files} )
  set( src ${CMAKE_CURRENT_SOURCE_DIR}/${f} )
  set( dst ${output_dir}/${f} )
  add_custom_command(OUTPUT ${dst}
    DEPENDS ${src}
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${src} ${dst}
    COMMENT "Copying clang's ${f}...")
  list(APPEND out_files ${dst})
endforeach( f )

if(INTEL_CUSTOMIZATION)
  # Create build commands for Intel-added header files.
  # The commands implement copying by throwing away "Intel_Headers/" prefix.
  foreach( f ${INTEL_HEADERS} )
    string(REGEX REPLACE "^Intel_Headers/" "" fname "${f}")
    set( src ${CMAKE_CURRENT_SOURCE_DIR}/${f} )
    set( dst ${output_dir}/${fname} )
    add_custom_command(OUTPUT ${dst}
      DEPENDS ${src}
      COMMAND ${CMAKE_COMMAND} -E copy_if_different ${src} ${dst}
      COMMENT "Copying clang's ${f}...")
    install(
      FILES ${f}
      RENAME ${fname}
      COMPONENT clang-headers
      PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
      DESTINATION lib${LLVM_LIBDIR_SUFFIX}/clang/${CLANG_VERSION}/include)
    install(
      FILES ${f}
      RENAME ${fname}
      COMPONENT icx-headers
      PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
      DESTINATION compiler/include/icx)
    list(APPEND out_files ${dst})
  endforeach( f )
endif(INTEL_CUSTOMIZATION)

add_custom_command(OUTPUT ${output_dir}/arm_neon.h
  DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/arm_neon.h
  COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/arm_neon.h ${output_dir}/arm_neon.h
  COMMENT "Copying clang's arm_neon.h...")
list(APPEND out_files ${output_dir}/arm_neon.h)
add_custom_command(OUTPUT ${output_dir}/arm_fp16.h
  DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/arm_fp16.h
  COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/arm_fp16.h ${output_dir}/arm_fp16.h
  COMMENT "Copying clang's arm_fp16.h...")
list(APPEND out_files ${output_dir}/arm_fp16.h)

add_custom_target(clang-headers ALL DEPENDS ${out_files})
set_target_properties(clang-headers PROPERTIES
  FOLDER "Misc"
  RUNTIME_OUTPUT_DIRECTORY "${output_dir}")

install(
  FILES ${files} ${CMAKE_CURRENT_BINARY_DIR}/arm_neon.h
  COMPONENT clang-headers
  PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
  DESTINATION lib${LLVM_LIBDIR_SUFFIX}/clang/${CLANG_VERSION}/include)

install(
  FILES ${files} ${CMAKE_CURRENT_BINARY_DIR}/arm_fp16.h
  COMPONENT clang-headers
  PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
  DESTINATION lib${LLVM_LIBDIR_SUFFIX}/clang/${CLANG_VERSION}/include)

install(
  FILES ${cuda_wrapper_files}
  COMPONENT clang-headers
  PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
  DESTINATION lib${LLVM_LIBDIR_SUFFIX}/clang/${CLANG_VERSION}/include/cuda_wrappers)

if (NOT CMAKE_CONFIGURATION_TYPES) # don't add this for IDE's.
  add_llvm_install_targets(install-clang-headers
                           DEPENDS clang-headers
                           COMPONENT clang-headers)
endif()

# INTEL_CUSTOMIZATION
# TODO: we eventually should get rid of this list and associated install target.
# The list added to make smooth transition from using copylist tool to using make
# when we changed the way install directory is populated.
# Some of these headers are not harmful and were added because copylist
# did not install them and since they are not harmful we let them be installed.

set(intel_exclude_files
#  __clang_cuda_builtin_vars.h
#  __clang_cuda_cmath.h
#  __clang_cuda_complex_builtins.h
#  __clang_cuda_device_functions.h
#  __clang_cuda_intrinsics.h
#  __clang_cuda_libdevice_declares.h
#  __clang_cuda_math_forward_declares.h
#  __clang_cuda_runtime_wrapper.h
#  __stddef_max_align_t.h
#  altivec.h
#  arm_acle.h
  arm_fp16.h
  arm_neon.h
#  arm64intr.h
#  armintr.h
  float.h
#  htmintrin.h
#  htmxlintrin.h
  inttypes.h
  iso646.h
  limits.h
  module.modulemap
#  msa.h
#  s390intrin.h
  stdalign.h
  stdarg.h
  stdatomic.h
  stdbool.h
  stddef.h
  stdint.h
  stdnoreturn.h
# tgmath.h
  unwind.h
  varargs.h
# vecintrin.h
  )

list(REMOVE_ITEM files ${intel_exclude_files})
install(
  FILES ${files}
  COMPONENT icx-headers
  PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
  DESTINATION compiler/include/icx)

# Add convenience install target
add_llvm_install_targets(install-icx-headers
                         DEPENDS clang-headers
                         COMPONENT clang-headers-icx)
# end INTEL_CUSTOMIZATION
