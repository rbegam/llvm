//===-- LPUSubtarget.h - Define Subtarget for the LPU ----------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the LPU specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_LPU_LPUSUBTARGET_H
#define LLVM_LIB_TARGET_LPU_LPUSUBTARGET_H

#include "LPUFrameLowering.h"
#include "LPUISelLowering.h"
#include "LPUInstrInfo.h"
#include "LPURegisterInfo.h"
#include "LPUSelectionDAGInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "LPUGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class LPUSubtarget : public LPUGenSubtargetInfo {
  virtual void anchor();
  const DataLayout DL; // Calculates type size & alignment
  LPUFrameLowering FrameLowering;
  LPUInstrInfo InstrInfo;
  LPUTargetLowering TLInfo;
  LPUSelectionDAGInfo TSInfo;
  std::string LPUName;

protected:
  bool HasS8;
  bool HasS16;
  bool HasF16;
  bool HasIDiv;
  bool HasFDiv;
  bool HasFMA;
  bool HasSqrt;
  bool HasMath0;

public:
  std::string lpuName() const { return LPUName; }
  bool hasS8()    const { return HasS8; }
  bool hasS16()   const { return HasS16; }
  bool hasF16()   const { return HasF16; }
  bool hasIDiv()  const { return HasIDiv; }
  bool hasFDiv()  const { return HasFDiv; }
  bool hasFMA()   const { return HasFMA; }
  bool hasSqrt()  const { return HasSqrt; }
  bool hasMath0() const { return HasMath0; }

  /// This constructor initializes the data members to match that
  /// of the specified triple.
  ///
  LPUSubtarget(const std::string &TT, const std::string &CPU,
                  const std::string &FS, const TargetMachine &TM);

  LPUSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const LPUInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const DataLayout *getDataLayout() const override { return &DL; }
  const TargetRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const LPUTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const LPUSelectionDAGInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }

  // No scheduling...
  bool enableMachineScheduler() const override { return false; }
  bool enablePostMachineScheduler() const override { return false; }
};
} // End llvm namespace

#endif  // LLVM_TARGET_LPU_SUBTARGET_H
