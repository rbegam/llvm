//===-- Nios2Subtarget.h - Define Subtarget for the Nios2 ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Nios2 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_NIOS2_NIOS2SUBTARGET_H
#define LLVM_LIB_TARGET_NIOS2_NIOS2SUBTARGET_H

#include "Nios2FrameLowering.h"
#include "Nios2ISelLowering.h"
#include "Nios2InstrInfo.h"
#include "llvm/CodeGen/GlobalISel/GISelAccessor.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/GlobalISel/GISelAccessor.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/Target/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "Nios2GenSubtargetInfo.inc"

extern bool Nios2ReserveGP;
extern bool Nios2NoCpload;

namespace llvm {
class StringRef;

class Nios2TargetMachine;

class Nios2Subtarget : public Nios2GenSubtargetInfo {
  virtual void anchor();

public:

  bool HasBMX;
  bool HasCDX;
  bool HasMPX;
  bool HasR2Mandatory;

protected:
  enum Nios2ArchEnum {
    Nios2r1,
    Nios2r2
  };

  // Nios2 architecture version
  Nios2ArchEnum Nios2ArchVersion;

  // IsLittle - The target is Little Endian
  bool IsLittle;

  bool EnableOverflow;

  // HasCmp - cmp instructions.
  bool HasCmp;

  // HasSlt - slt instructions.
  bool HasSlt;

  InstrItineraryData InstrItins;

  // UseSmallSection - Small section is used.
  bool UseSmallSection;

  const Nios2TargetMachine &TM;

  Triple TargetTriple;

  const SelectionDAGTargetInfo TSInfo;

  std::unique_ptr<const Nios2InstrInfo> InstrInfo;
  std::unique_ptr<const Nios2FrameLowering> FrameLowering;
  std::unique_ptr<const Nios2TargetLowering> TLInfo;
  
  /// Gather the accessor points to GlobalISel-related APIs.
  /// This is used to avoid ifndefs spreading around while GISel is
  /// an optional library.
  std::unique_ptr<GISelAccessor> GISel;


public:
  /// This object will take onwership of \p GISelAccessor.
  void setGISelAccessor(GISelAccessor &GISel) {
    this->GISel.reset(&GISel);
  }

  bool isPositionIndependent() const;
  const Nios2ABIInfo &getABI() const;

  /// This constructor initializes the data members to match that
  /// of the specified triple.
  Nios2Subtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
                bool little, const Nios2TargetMachine &_TM);

//- Vitual function, must have
  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool isLittle() const { return IsLittle; }
  bool hasNios2r1() const { return Nios2ArchVersion >= Nios2r1; }
  bool isNios2r1() const { return Nios2ArchVersion == Nios2r1; }
  bool hasNios2r2() const { return Nios2ArchVersion >= Nios2r2; }
  bool isNios2r2() const { return Nios2ArchVersion == Nios2r2; }

  /// Features related to the presence of specific instructions.
  bool enableOverflow() const { return EnableOverflow; }
  bool disableOverflow() const { return !EnableOverflow; }
  bool hasCmp()   const { return HasCmp; }
  bool hasSlt()   const { return HasSlt; }

  bool useSmallSection() const { return UseSmallSection; }

  bool abiUsesSoftFloat() const;

  unsigned stackAlignment() const { return 8; }

  Nios2Subtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                 const TargetMachine &TM);

  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const Nios2InstrInfo *getInstrInfo() const override { return InstrInfo.get(); }
  const TargetFrameLowering *getFrameLowering() const override {
    return FrameLowering.get();
  }
  const Nios2RegisterInfo *getRegisterInfo() const override {
    return &InstrInfo->getRegisterInfo();
  }
  const Nios2TargetLowering *getTargetLowering() const override {
    return TLInfo.get();
  }
  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }
  const CallLowering *getCallLowering() const override;
  const InstructionSelector *getInstructionSelector() const override;
  const LegalizerInfo *getLegalizerInfo() const override;
  const RegisterBankInfo *getRegBankInfo() const override;
};
} // End llvm namespace

#endif
