//===-- CSASubtarget.h - Define Subtarget for the CSA ----------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the CSA specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_CSA_CSASUBTARGET_H
#define LLVM_LIB_TARGET_CSA_CSASUBTARGET_H

#include "CSAFrameLowering.h"
#include "CSAISelLowering.h"
#include "CSAInstrInfo.h"
#include "CSARegisterInfo.h"
#include "CSASelectionDAGInfo.h"
#include "llvm/Target/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "CSAGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class CSASubtarget : public CSAGenSubtargetInfo {
  virtual void anchor();
  CSAFrameLowering FrameLowering;
  CSAInstrInfo InstrInfo;
  CSATargetLowering TLInfo;
  CSASelectionDAGInfo TSInfo;
  std::string CSAName;

protected:
  bool IsOrdered;
  bool HasI0;
  bool HasI1;
  bool HasI8;
  bool HasI16;
  bool HasI32;
  bool HasI64;
  bool HasF16;
  bool HasF32;
  bool HasF64;
  bool HasSextL;
  bool HasDispl;
  bool HasIndex;
  bool HasShAdd;
  bool HasBitOp;
  bool HasIDiv;
  bool HasFDiv;
  bool HasFMA;
  bool HasRcpA;
  bool HasRSqrtA;
  bool HasSqrt;
  bool HasMath0;

public:
  std::string csaName() const { return CSAName; }
  bool isOrdered() const { return IsOrdered; }
  bool hasI0()     const { return HasI0; }
  bool hasI1()     const { return HasI1; }
  bool hasI8()     const { return HasI8; }
  bool hasI16()    const { return HasI16; }
  bool hasI32()    const { return HasI32; }
  bool hasI64()    const { return HasI64; }
  bool hasF16()    const { return HasF16; }
  bool hasF32()    const { return HasF32; }
  bool hasF64()    const { return HasF64; }
  bool hasSextL()  const { return HasSextL; }
  bool hasDispl()  const { return HasDispl; }
  bool hasIndex()  const { return HasIndex; }
  bool hasShAdd()  const { return HasShAdd; }
  bool hasBitOp()  const { return HasBitOp; }
  bool hasIDiv()   const { return HasIDiv; }
  bool hasFDiv()   const { return HasFDiv; }
  bool hasFMA()    const { return HasFMA; }
  bool hasRcpA()   const { return HasRcpA; }
  bool hasRSqrtA() const { return HasRSqrtA; }
  bool hasSqrt()   const { return HasSqrt; }
  bool hasMath0()  const { return HasMath0; }

  /// This constructor initializes the data members to match that
  /// of the specified triple.
  ///
  CSASubtarget(const Triple &TT, const std::string &CPU,
                  const std::string &FS, const TargetMachine &TM);

  CSASubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const CSAInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const TargetRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const CSATargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const CSASelectionDAGInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }

  // No scheduling...
  bool enableMachineScheduler() const override { return false; }
  bool enablePostRAScheduler() const override { return false; }
};
} // End llvm namespace

#endif  // LLVM_TARGET_CSA_SUBTARGET_H
