#if INTEL_COLLAB // -*- C++ -*-
//===------------- Directives.h - Class definition -*- C++ -*--------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// ===--------------------------------------------------------------------=== //
///
/// \file
/// Contains the enumerations for parallel/vector directives and clauses. The
/// enums are automatically generated by TableGen.
///
// ===--------------------------------------------------------------------=== //

#ifndef LLVM_ANALYSIS_DIRECTIVES_H
#define LLVM_ANALYSIS_DIRECTIVES_H


#include "llvm/Support/Debug.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/ADT/StringMap.h"
#include <unordered_map>

using namespace llvm;

namespace llvm {

typedef enum OMP_DIRECTIVES {
#define GET_DIRECTIVES_ENUM_VALUES
#include "llvm/IR/Directives.gen"
#undef GET_DIRECTIVES_ENUM_VALUES
} OMP_DIRECTIVES;

typedef enum OMP_CLAUSES {
#define GET_CLAUSES_ENUM_VALUES
#include "llvm/IR/Directives.gen"
#undef GET_CLAUSES_ENUM_VALUES
} OMP_CLAUSES;

class Directives {

public:
// Map OMP_DIRECTIVES to StringRefs
static std::unordered_map<int, StringRef> DirectiveStrings;

// Map OMP_CLAUSES to StringRefs
static std::unordered_map<int, StringRef> ClauseStrings;

// Map Strings to OMP_DIRECTIVES
static StringMap<int> DirectiveIDs;

// Map Strings to OMP_CLAUSES
static StringMap<int> ClauseIDs;

};

} // end llvm namespace

#endif // LLVM_ANALYSIS_DIRECTIVES_H
#endif // INTEL_COLLAB
