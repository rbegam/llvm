//===---------- Intel_Directives.h - Class definition -*- C++ -*-----------===//
//
// Copyright (C) 2015-2016 Intel Corporation. All rights reserved.
//
// The information and source code contained herein is the exclusive property
// of Intel Corporation and may not be disclosed, examined or reproduced in
// whole or in part without explicit written authorization from the company.
//
// ===--------------------------------------------------------------------=== //
///
/// \file
/// Contains the enumerations for parallel/vector directives and clauses. The
/// enums are automatically generated by TableGen.
///
// ===--------------------------------------------------------------------=== //

#ifndef LLVM_TRANSFORM_UTILS_INTEL_DIRECTIVES_H
#define LLVM_TRANSFORM_UTILS_INTEL_DIRECTIVES_H


#include "llvm/Support/Debug.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/ADT/StringMap.h"
#include <unordered_map>

#define DEBUG_TYPE "Intel_Directives"

using namespace llvm;

namespace llvm {

typedef enum OMP_DIRECTIVES {
#define GET_DIRECTIVES_ENUM_VALUES
#include "llvm/IR/Intel_Directives.gen"
#undef GET_DIRECTIVES_ENUM_VALUES
  DIR_QUAL_LIST_END // must be last; marks end of directives
} OMP_DIRECTIVES;

typedef enum OMP_CLAUSES {
#define GET_CLAUSES_ENUM_VALUES
#include "llvm/IR/Intel_Directives.gen"
#undef GET_CLAUSES_ENUM_VALUES
  QUAL_LIST_END     // must be last; marks end of clauses
} OMP_CLAUSES;

class IntelDirectives {

public:
// Map OMP_DIRECTIVES to StringRefs
static std::unordered_map<int, StringRef> DirectiveStrings;

// Map OMP_CLAUSES to StringRefs
static std::unordered_map<int, StringRef> ClauseStrings;

// Map Strings to OMP_DIRECTIVES
static StringMap<int> DirectiveIDs;

// Map Strings to OMP_CLAUSES
static StringMap<int> ClauseIDs;

};

} // end llvm namespace

#endif // LLVM_TRANSFORM_UTILS_INTEL_DIRECTIVES_H
