//=-- VPOParoptUtils.h - Class definition for VPO Paropt utilites -*- C++ -*-=//
//
// Copyright (C) 2015-2016 Intel Corporation. All rights reserved.
//
// The information and source code contained herein is the exclusive property
// of Intel Corporation and may not be disclosed, examined or reproduced in
// whole or in part without explicit written authorization from the company.
//
// Authors:
// --------
// Xinmin Tian (xinmin.tian@intel.com)
//
// Major Revisions:
// ----------------
// Nov 2015: Initial Implementation of OpenMP runtime APIs (Xinmin Tian)
//
//===----------------------------------------------------------------------===//
///
/// \file
/// This file defines the VPOParoptUtils class and provides a set of utilities
/// that are used for Paropt transformation and multi-threaded code generation.
///
//===----------------------------------------------------------------------===//

#ifndef LLVM_TRANSFORM_VPO_PAROPT_UTILS_H
#define LLVM_TRANSFORM_VPO_PAROPT_UTILS_H

#include "llvm/ADT/SmallVector.h"
#include "llvm/ADT/StringMap.h"
#include "llvm/Analysis/LoopInfo.h"
#include "llvm/IR/DebugInfo.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Support/Debug.h"
#include "llvm/Transforms/Utils/ValueMapper.h"
#include "llvm/Transforms/Utils/Cloning.h"
#include "llvm/Analysis/Intel_VPO/WRegionInfo/WRegionUtils.h"
#include <unordered_map>

// Use trampoline for internal microtasks
#define KMP_IDENT_IMB              0x01

// Use c-style ident structure
#define KMP_IDENT_KMPC             0x02

// Entry point generated using Cluster OpenMP switch
#define KMP_IDENT_CLOMP            0x04

// Entry point generated by auto-parallelization
#define KMP_IDENT_AUTOPAR          0x08

// compiler generates atomic reduction option for kmpc_reduce
#define KMP_IDENT_ATOMIC_REDUCE    0x10

// replaced by KMP_IDENT_BARRIER_EXPL below
// #define KMP_IDENT_EXPLICIT_BARRIER 0x20

//
// Implicit barriers are classified further
//
// = 0000 0010 0000 barrier directive in user's code
#define KMP_IDENT_BARRIER_EXPL           0x0020

// = 0000 0100 0000
#define KMP_IDENT_BARRIER_IMPL           0x0040

// = 0001 1100 0000 unused by cmplr
#define KMP_IDENT_BARRIER_IMPL_MASK      0x01C0

// = 0000 0100 0000
#define KMP_IDENT_BARRIER_IMPL_FOR       0x0040

// = 0000 1100 0000
#define KMP_IDENT_BARRIER_IMPL_SECTIONS  0x00C0

// = 0001 0100 0000
#define KMP_IDENT_BARRIER_IMPL_SINGLE    0x0140

// = 0001 1100 0000 workshare construct not supported by cmplr
#define KMP_IDENT_BARRIER_IMPL_WORKSHARE 0x01C0

namespace llvm {

class Value;
class Module;
class Function;
class Type;
class BasicBlock;
class Loop;
class LoopInfo;
class DominatorTree;
class StringRef;
class CallInst;
class IntrinsicInst;
class Constant;
class LLVMContext;

namespace vpo {

/// \brief This class contains a set of utility functions used by VPO Paropt 
/// Transformation passes.
class VPOParoptUtils {

private:
    /// \brief Private utility functions
    /// TBA

public:
    /// Constructor and destructor
    VPOParoptUtils() {}
    ~VPOParoptUtils() {}

    /// \brief Generate OpenMP runtime __kmpc_begin(&loc, flags) 
    /// initialization code. The generated runtime routine call is invoked 
    /// (only once) right after entering the main function.
    static CallInst* genRTLKmpcBeginCall(Function *F, Instruction *AI, 
                                         StructType *IdentTy);

    /// \brief Generate OpenMP runtime __kmpc_end(&loc) termination code 
    /// The generated runtime routine call is invoked (only once) right 
    /// before exiting the main function.
    static CallInst* genRTLKmpcEndCall(Function *F, 
                                       Instruction *AI, 
                                       StructType *IdentTy);
   
    /// \brief Generate OpenMP runtime __kmpc_global_thread_num() call 
    /// The generated runtime routine call is invoked (only once) to get 
    /// runtime right 
    /// after entering each function that contains OpenMP constructs 
    static CallInst* genRTLKmpcGlobalThreadNumCall(Function    *F, 
                                                   Instruction *AI, 
                                                   StructType  *IdentTy);
      
    /// \brief Generate source location information from Instruction DebugLoc
    static AllocaInst* genKmpcLocfromDebugLoc(Function *F, Instruction *AI, 
                                              StructType *IdentTy, int Flags, 
                                              BasicBlock *BS, BasicBlock *BE);

    /// \brief Generate source location information for Explicit barrier
    static AllocaInst* genKmpcLocforExplicitBarrier(Function *F, 
                                                    Instruction *AI, 
                                                    StructType *IdentTy, 
                                                    BasicBlock *BB);

    /// \brief Generate source location information for Implicit barrier
    static AllocaInst* genKmpcLocforImplicitBarrier(WRegionNode *W,
                                                    Function *F,
                                                    Instruction *AI,
                                                    StructType *IdentTy,
                                                    BasicBlock *BB);
};

} // End vpo namespace
} // End llvm namespace

#endif // LLVM_TRANSFORMS_VPO_PAROPT_UTILS_H

