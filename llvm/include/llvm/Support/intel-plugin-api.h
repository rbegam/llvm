//===------- intel-plugin-api.h - Interface for gold plugin - C++ -*------===//
//
// Copyright (C) 2019 Intel Corporation. All rights reserved.
//
// The information and source code contained herein is the exclusive property
// of Intel Corporation and may not be disclosed, examined or reproduced in
// whole or in part without explicit written authorization from the company.
//
//===---------------------------------------------------------------------===//
///
/// File for handling the plugin information.
/// High level picture of the structure for handling the information:
///   "all symbols read" handler (expecting that all symbols has been read)
///   "claim file" handler (opened file)
///   symbol (a symbol in the symbol table)
///   message (print warnings and/or errors)
///
/// This header file was implemented using the information in the WHOPR
/// documentation (https://gcc.gnu.org/wiki/whopr/driver) and the gold plugin
/// file (llvm/tools/gold/gold-plugin.cpp).
///
//===---------------------------------------------------------------------===//

#ifndef INTEL_PLUGIN_API_H
#define INTEL_PLUGIN_API_H

#ifdef __cplusplus
extern "C"
{
#endif

// Each funtion returns a status value from type enum ld_plugin_status.
// It is expected to get LDPS_OK (0) as pass, else each returned value
// is a different error code.
enum ld_plugin_status
{
  LDPS_OK = 0,
  LDPS_NO_SYMS,     // Trying to collect symbols that haven't been added
  LDPS_BAD_HANDLE,  // There is no object associated with a given handle
  LDPS_ERR          // Other errors
};

// Type of the output file generated by the linker using the tag
// LDPT_LINKER_OUTPUT.
// NOTE: LDPO_PIE is not presented in the WHOPR documentation, but is
// used in the gold-plugin.cpp file.
enum ld_plugin_output_file_type
{
  LDPO_REL,       // .o
  LDPO_EXEC,      // .exe
  LDPO_DYN,       // .so
  LDPO_PIE        // position independent executable
};

// Interface for "all symbols read" handler (main handler)
typedef
enum ld_plugin_status (*ld_plugin_all_symbols_read_handler)(void);

// Interface for registering an "all symbols read" handler when the
// tv tag is LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK.
//   handler: "all symbols read" handler
// NOTE: According to the WHOPR documentation, this interface
// is known as register_all_symbols_read_hook, but in gold-plugin.cpp
// LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK uses
// ld_plugin_register_all_symbols_read.
typedef
enum ld_plugin_status
(*ld_plugin_register_all_symbols_read)
  (ld_plugin_all_symbols_read_handler handler);

// Definitions and interfaces related to files

// Structure to handle input files passed to the
// claim file hook handler
//   name:     Path of input file
//   fd:       File descriptor of input file
//   offset:   Offset of the input file within an archive file,
//             0 for standalone files
//   filesize: Handle assigned to the input file
struct ld_plugin_input_file
{
  const char *name;
  int fd;
  off_t offset;
  off_t filesize;
  void* handle;
};

// Handler for a "claim file"
//   file: input file to be claimed
//   claimed: if the file is claimed succefully, this value will be 1
typedef
enum ld_plugin_status
(*ld_plugin_claim_file_handler)
  (const struct ld_plugin_input_file *file, int *claimed);

// Interface for register a "claim file" handler when the tv tag
// is LDPT_REGISTER_CLAIM_FILE_HOOK.
//   handler: "claim file" handler
// NOTE: According to the WHOPR documentation, this interface is
// known as register_claim_file_hook, but in gold-plugin.cpp
// LDPT_REGISTER_CLAIM_FILE_HOOK uses ld_plugin_register_claim_file.
typedef
enum ld_plugin_status
(*ld_plugin_register_claim_file)(ld_plugin_claim_file_handler handler);

// Add an input file to an "all symbols read" handler when the tv
// tag is LDPT_ADD_INPUT_FILE.
//   pathname: Path to the object file
// NOTE: The WHOPR documentation presents this interface as
// add_input_file, but in gold-plugin.cpp is know as
// ld_plugin_add_input_file.
typedef
enum ld_plugin_status (*ld_plugin_add_input_file)(const char *pathname);

// Add an extra path for library search when the tv tag is
// LDPT_SET_EXTRA_LIBRARY_PATH
//   path: Path to be added
// NOTE: This interface is not shown in the WHOPR documentation,
// it was implemented analyzing the gold-plugin.cpp file.
typedef
enum ld_plugin_status (*ld_plugin_set_extra_library_path)(const char *path);

// Interface for obtaining an opened file descriptor from a
// "all symbols read" handler when the tv tag is LDPT_GET_INPUT_FILE
//   handle: input file handle
//   file:   ld_plugin_input_file created if the file is read successfully
// NOTE: The WHOPR documentation presents this interface as get_input_file,
// but in gold-plugin.cpp it is known as ld_plugin_get_input_file.
typedef
enum ld_plugin_status
(*ld_plugin_get_input_file)(void *handle, struct ld_plugin_input_file *file);

// Release a file descriptor obtained from get_input_file in an
// "all symbols read" handler when the tv tag is LDPT_RELEASE_INPUT_FILE
//   handle: Input file handle
// NOTE: The WHOPR documentation presents this function as release_input_file,
// but in gold-plugin.cpp this function is known as
// ld_plugin_release_input_file.
typedef
enum ld_plugin_status (*ld_plugin_release_input_file)(void *handle);

// Interface for handling the removal of temporary files and cleanup
typedef
enum ld_plugin_status (*ld_plugin_cleanup_handler)(void);

// Interface for registering a cleanup handler when the tv tag
// is LDPT_REGISTER_CLEANUP_HOOK.
//   handler: cleanup handler
// NOTE: In the WHOPR documentation this interface is know as
// register_cleanup_hook, but in gold-plugin.cpp it is named
// as ld_plugin_register_cleanup.
typedef
enum ld_plugin_status
(*ld_plugin_register_cleanup)(ld_plugin_cleanup_handler handler);

// Collect the memory view of a file when the tv tag is
// LDPT_GET_VIEW
//   handle: Input file handle
//   view:   Pointer to where the view is stored
typedef
enum ld_plugin_status
(*ld_plugin_get_view)(const void *handle, const void **viewp);

// Definitions and interfaces related to symbols

// Kind of symbol
enum ld_plugin_symbol_kind
{
  LDPK_DEF,
  LDPK_WEAKDEF,
  LDPK_UNDEF,
  LDPK_WEAKUNDEF,
  LDPK_COMMON
};

// Visibility of the symbol
enum ld_pugin_symbol_visibility
{
  LDPV_DEFAULT,
  LDPV_PROTECTED,
  LDPV_INTERNAL,
  LDPV_HIDDEN
};

// Status of the symbol resolution
enum ld_plugin_symbol_resolution
{
  LDPR_UNKNOWN = 0,
  LDPR_UNDEF,
  LDPR_PREVAILING_DEF,
  LDPR_PREVAILING_DEF_IRONLY,
  LDPR_PREEMPTED_REG,
  LDPR_PREEMPTED_IR,
  LDPR_RESOLVED_IR,
  LDPR_RESOLVED_EXEC,
  LDPR_RESOLVED_DYN,
  LDPR_PREVAILING_DEF_IRONLY_EXP
};

// Structure that represents a global symbol
//   name:       name of symbol
//   version:    version name (NULL if not versioned)
//   def:        Kind of the symbol based on ld_plugin_symbol_kind
//   visibility: Symbol's visibility based on ld_plugin_symbol_visibility
//   size:       Size of the symbol (for common symbol only)
//   comdat_key: Name of the key symbol for the COMDAT group, NULL if the
//               symbol if not part of a COMDAT group
//   resolution: Status of the symbol resolution based on
//               ld_plugin_symbol_resolution
struct ld_plugin_symbol
{
  char *name;
  char *version;
  int def;
  int visibility;
  uint64_t size;
  char *comdat_key;
  int resolution;
};

// Interface for adding a symbol from a "claim file" handler when the tv
// tag is LDPT_ADD_SYMBOLS
//   handle: "claim file" handler
//   nsyms:  number of symbols in the array
//   syms:   array of symbols
// NOTE: In the WHOPR documentation, this interface is known as
// add_symbols, but in gold-plugin.cpp it is named as
// ld_plugin_add_symbols.
typedef
enum ld_plugin_status
(*ld_plugin_add_symbols)
  (const void *handler, int nsyms, const struct ld_plugin_symbol *syms);

// Get the symbols from an object in the "all symbols read" handler when
// the tv tag is LDPT_GET_SYMBOLS and LDPT_GET_SYMBOLS_V2
//   handle: Input file handle
//   nsyms:  Number of symbols in the array
//   syms:   Array of symbols
// NOTE: According to the WHOPR documentation this interface is known
// as get_symbols, but in gold-plugin.cpp it is used as
// ld_plugin_get_symbols.
typedef
enum ld_plugin_status
(*ld_plugin_get_symbols)
  (const void *handle, int nsyms, struct ld_plugin_symbol *syms);

// Definitions related to warning and error messages

// Type of message
enum ld_plugin_level
{
  LDPL_INFO,
  LDPL_WARNING,
  LDPL_ERROR,
  LDPL_FATAL
};

// Interface for issuing linker messages related to warning or errors,
// this will be called when the tag for tv is LDPT_MESSAGE
//   level: Severity level of the message based on ld_plugin_level
//   format: Format of the message
// NOTE: This interface is named as message in the WHOPR documentation,
// but in gold-plugin.cpp is used as ld_plugin_message.
typedef
enum ld_plugin_status
(*ld_plugin_message)(int level, const char *format, ...);

// Values of tv_tag field in the transfer vector
enum ld_plugin_tag
{
  LDPT_NULL                                =  0,
  // Version number of the API
  LDPT_API_VERSION                         =  1,
  // Identify that gold linker is used and provide the version number
  LDPT_GOLD_VERSION                        =  2,
  // Identify that a link operation is done and provide output file's type
  LDPT_LINKER_OUTPUT                       =  3,
  // Stores a command-line option
  LDPT_OPTION                              =  4,
  // Register a a handler for the input file that will be opened
  LDPT_REGISTER_CLAIM_FILE_HOOK            =  5,
  // Register a handler for "all symbols read" (use for implementing WPA)
  LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK      =  6,
  // Register a handler for cleaning the data after linking
  LDPT_REGISTER_CLEANUP_HOOK               =  7,
  // Send symbols from the input file to the linker
  LDPT_ADD_SYMBOLS                         =  8,
  // Get symbol information from the linker during WPA phase
  LDPT_GET_SYMBOLS                         =  9,
  // Add ELF file to the linker
  LDPT_ADD_INPUT_FILE                      = 10,
  // Print warning or error message
  LDPT_MESSAGE                             = 11,
  // Open (or re-open) file descriptor from a claim input file
  LDPT_GET_INPUT_FILE                      = 12,
  // Release a file descriptor from a claim input file
  LDPT_RELEASE_INPUT_FILE                  = 13,
  // Same as LDPT_ADD_INPUT_FILE but collects the information from "-l"
  LDPT_ADD_INPUT_LIBRARY                   = 14,
  // Store the output name specified with "-o"
  LDPT_OUTPUT_NAME                         = 15,
  // Add extra path to the linker for searching libraries
  LDPT_SET_EXTRA_LIBRARY_PATH              = 16,
  // Version of the GNU linker
  LDPT_GNU_LD_VERSION                      = 17,
  // Get the memory view of a file
  LDPT_GET_VIEW                            = 18,
  // Number of sections in an object file
  LDPT_GET_INPUT_SECTION_COUNT             = 19,
  // Type of a section
  LDPT_GET_INPUT_SECTION_TYPE              = 20,
  // Name of section
  LDPT_GET_INPUT_SECTION_NAME              = 21,
  // Contents of a section
  LDPT_GET_INPUT_SECTION_CONTENTS          = 22,
  // Indicates to the linker that a group of section should be laid out
  // in a particular order
  LDPT_UPDATE_SECTION_ORDER                = 23,
  // Inform to the linker that the section ordering is needed
  LDPT_ALLOW_SECTION_ORDERING              = 24,
  // Same as LDPT_GET_SYMBOLS
  LDPT_GET_SYMBOLS_V2                      = 25,
  // Indicates to the linker that a subset of sections should be laid
  // out in a separate ELF segment
  LDPT_ALLOW_UNIQUE_SEGMENT_FOR_SECTIONS   = 26,
  // Specifies that a group of sections should be layout in a separate
  // segment in a particular order
  LDPT_UNIQUE_SEGMENT_FOR_SECTIONS         = 27
};

// Structure for the transfer vector
struct ld_plugin_tv
{
  enum ld_plugin_tag tv_tag;
  union
  {
    int tv_val;
    // NOTE: In the WHOPR documentation we have a void pointer known as
    // tv_ptr that will point to the corresponding function pointer
    // mentioned before using the ld_plugin_tag. But, in gold-plugin.cpp,
    // rather than using tv_ptr, we have a function pointer for each
    // interface and we use the tv_tag to indicate which field will be
    // used in the union.
    const char *tv_string;

    // "all symbols read" handler
    ld_plugin_register_all_symbols_read    tv_register_all_symbols_read;

    // Interfaces related to "claim files"
    ld_plugin_register_claim_file          tv_register_claim_file;
    ld_plugin_add_input_file               tv_add_input_file;
    ld_plugin_set_extra_library_path       tv_set_extra_library_path;
    ld_plugin_get_input_file               tv_get_input_file;
    ld_plugin_release_input_file           tv_release_input_file;
    ld_plugin_register_cleanup             tv_register_cleanup;
    ld_plugin_get_view                     tv_get_view;

    // Interfaces related to symbols
    ld_plugin_add_symbols                  tv_add_symbols;
    ld_plugin_get_symbols                  tv_get_symbols;

    // Interface related to messages
    ld_plugin_message                      tv_message;
  } tv_u;
};

// Plugin interface called when the library is loaded.
// The implementation is in gold-plugin.cpp. In summary,
// the interface reads a tv tag (type ld_plugin_tag) to
// know which field from the union will be collected.
//   tv: transfer vector
typedef
enum ld_plugin_status (*ld_plugin_onload)(struct ld_plugin_tv *tv);

#ifdef __cplusplus
}
#endif

#endif // INTEL_PLUGIN_API_H
