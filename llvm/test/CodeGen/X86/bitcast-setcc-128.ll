; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=x86_64-apple-darwin -mcpu=core-avx2 < %s | FileCheck %s --check-prefix=AVX2
; RUN: llc -mtriple=x86_64-apple-darwin -mcpu=skx < %s | FileCheck %s --check-prefix=AVX512

define i8 @v8i16(<8 x i16> %a, <8 x i16> %b) {
; AVX2-LABEL: v8i16:
; AVX2:       ## BB#0:
; AVX2-NEXT:    vpcmpgtw %xmm1, %xmm0, %xmm0
; AVX2-NEXT:    vpmovsxwd %xmm0, %ymm0
; AVX2-NEXT:    vmovmskps %ymm0, %eax
; AVX2-NEXT:    ## kill: %AL<def> %AL<kill> %EAX<kill>
; AVX2-NEXT:    vzeroupper
; AVX2-NEXT:    retq
;
; AVX512-LABEL: v8i16:
; AVX512:       ## BB#0:
; AVX512-NEXT:    vpcmpgtw %xmm1, %xmm0, %k0
; AVX512-NEXT:    kmovd %k0, %eax
; AVX512-NEXT:    ## kill: %AL<def> %AL<kill> %EAX<kill>
; AVX512-NEXT:    retq
  %x = icmp sgt <8 x i16> %a, %b
  %res = bitcast <8 x i1> %x to i8
  ret i8 %res
}

define i4 @v4i32(<4 x i32> %a, <4 x i32> %b) {
; AVX2-LABEL: v4i32:
; AVX2:       ## BB#0:
; AVX2-NEXT:    vpcmpgtd %xmm1, %xmm0, %xmm0
; AVX2-NEXT:    vmovmskps %xmm0, %eax
; AVX2-NEXT:    ## kill: %AL<def> %AL<kill> %EAX<kill>
; AVX2-NEXT:    retq
;
; AVX512-LABEL: v4i32:
; AVX512:       ## BB#0:
; AVX512-NEXT:    vpcmpgtd %xmm1, %xmm0, %k0
; AVX512-NEXT:    kmovb %k0, -{{[0-9]+}}(%rsp)
; AVX512-NEXT:    movb -{{[0-9]+}}(%rsp), %al
; AVX512-NEXT:    retq
  %x = icmp sgt <4 x i32> %a, %b
  %res = bitcast <4 x i1> %x to i4
  ret i4 %res
}

define i4 @v4f32(<4 x float> %a, <4 x float> %b) {
; AVX2-LABEL: v4f32:
; AVX2:       ## BB#0:
; AVX2-NEXT:    vcmpltps %xmm0, %xmm1, %xmm0
; AVX2-NEXT:    vmovmskps %xmm0, %eax
; AVX2-NEXT:    ## kill: %AL<def> %AL<kill> %EAX<kill>
; AVX2-NEXT:    retq
;
; AVX512-LABEL: v4f32:
; AVX512:       ## BB#0:
; AVX512-NEXT:    vcmpltps %xmm0, %xmm1, %k0
; AVX512-NEXT:    kmovb %k0, -{{[0-9]+}}(%rsp)
; AVX512-NEXT:    movb -{{[0-9]+}}(%rsp), %al
; AVX512-NEXT:    retq
  %x = fcmp ogt <4 x float> %a, %b
  %res = bitcast <4 x i1> %x to i4
  ret i4 %res
}

define i16 @v16i8(<16 x i8> %a, <16 x i8> %b) {
; AVX2-LABEL: v16i8:
; AVX2:       ## BB#0:
; AVX2-NEXT:    vpcmpgtb %xmm1, %xmm0, %xmm0
; AVX2-NEXT:    vpmovmskb %xmm0, %eax
; AVX2-NEXT:    ## kill: %AX<def> %AX<kill> %EAX<kill>
; AVX2-NEXT:    retq
;
; AVX512-LABEL: v16i8:
; AVX512:       ## BB#0:
; AVX512-NEXT:    vpcmpgtb %xmm1, %xmm0, %k0
; AVX512-NEXT:    kmovd %k0, %eax
; AVX512-NEXT:    ## kill: %AX<def> %AX<kill> %EAX<kill>
; AVX512-NEXT:    retq
  %x = icmp sgt <16 x i8> %a, %b
  %res = bitcast <16 x i1> %x to i16
  ret i16 %res
}

define i2 @v2i64(<2 x i64> %a, <2 x i64> %b) {
; AVX2-LABEL: v2i64:
; AVX2:       ## BB#0:
; AVX2-NEXT:    vpcmpgtq %xmm1, %xmm0, %xmm0
; AVX2-NEXT:    vmovmskpd %xmm0, %eax
; AVX2-NEXT:    ## kill: %AL<def> %AL<kill> %EAX<kill>
; AVX2-NEXT:    retq
;
; AVX512-LABEL: v2i64:
; AVX512:       ## BB#0:
; AVX512-NEXT:    vpcmpgtq %xmm1, %xmm0, %k0
; AVX512-NEXT:    kmovb %k0, -{{[0-9]+}}(%rsp)
; AVX512-NEXT:    movb -{{[0-9]+}}(%rsp), %al
; AVX512-NEXT:    retq
  %x = icmp sgt <2 x i64> %a, %b
  %res = bitcast <2 x i1> %x to i2
  ret i2 %res
}

define i2 @v2f64(<2 x double> %a, <2 x double> %b) {
; AVX2-LABEL: v2f64:
; AVX2:       ## BB#0:
; AVX2-NEXT:    vcmpltpd %xmm0, %xmm1, %xmm0
; AVX2-NEXT:    vmovmskpd %xmm0, %eax
; AVX2-NEXT:    ## kill: %AL<def> %AL<kill> %EAX<kill>
; AVX2-NEXT:    retq
;
; AVX512-LABEL: v2f64:
; AVX512:       ## BB#0:
; AVX512-NEXT:    vcmpltpd %xmm0, %xmm1, %k0
; AVX512-NEXT:    kmovb %k0, -{{[0-9]+}}(%rsp)
; AVX512-NEXT:    movb -{{[0-9]+}}(%rsp), %al
; AVX512-NEXT:    retq
  %x = fcmp ogt <2 x double> %a, %b
  %res = bitcast <2 x i1> %x to i2
  ret i2 %res
}
