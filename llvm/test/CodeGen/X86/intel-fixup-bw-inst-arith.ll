; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-unknown | FileCheck %s

; All of the arith ops in this test should use the 32 bit form.

define void @inc(i16* %x, i16* %y, i16 %z) {
; CHECK-LABEL: inc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    incl %eax
; CHECK-NEXT:    movw %dx, (%rsi)
; CHECK-NEXT:    movw %ax, (%rdi)
; CHECK-NEXT:    retq
  %a = load i16, i16* %x
  %b = add i16 %a, 1
  store i16 %z, i16* %y
  store i16 %b, i16* %x
  ret void
}

define void @dec(i16* %x, i16* %y, i16 %z) {
; CHECK-LABEL: dec:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    decl %eax
; CHECK-NEXT:    movw %dx, (%rsi)
; CHECK-NEXT:    movw %ax, (%rdi)
; CHECK-NEXT:    retq
  %a = load i16, i16* %x
  %b = sub i16 %a, 1
  store i16 %z, i16* %y
  store i16 %b, i16* %x
  ret void
}

define void @add(i16* %x, i16* %y, i16 %z) {
; CHECK-LABEL: add:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    addl $2, %eax
; CHECK-NEXT:    movw %dx, (%rsi)
; CHECK-NEXT:    movw %ax, (%rdi)
; CHECK-NEXT:    retq
  %a = load i16, i16* %x
  %b = add i16 %a, 2
  store i16 %z, i16* %y
  store i16 %b, i16* %x
  ret void
}

define void @sub(i16* %x, i16* %y, i16 %z) {
; CHECK-LABEL: sub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    subl $-128, %eax
; CHECK-NEXT:    movw %dx, (%rsi)
; CHECK-NEXT:    movw %ax, (%rdi)
; CHECK-NEXT:    retq
  %a = load i16, i16* %x
  %b = add i16 %a, 128
  store i16 %z, i16* %y
  store i16 %b, i16* %x
  ret void
}

define void @and(i16* %x, i16* %y, i16 %z) {
; CHECK-LABEL: and:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    andl $-2, %eax
; CHECK-NEXT:    movw %dx, (%rsi)
; CHECK-NEXT:    movw %ax, (%rdi)
; CHECK-NEXT:    retq
  %a = load i16, i16* %x
  %b = and i16 %a, 65534
  store i16 %z, i16* %y
  store i16 %b, i16* %x
  ret void
}

define void @or(i16* %x, i16* %y, i16 %z) {
; CHECK-LABEL: or:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    orl $1, %eax
; CHECK-NEXT:    movw %dx, (%rsi)
; CHECK-NEXT:    movw %ax, (%rdi)
; CHECK-NEXT:    retq
  %a = load i16, i16* %x
  %b = or i16 %a, 1
  store i16 %z, i16* %y
  store i16 %b, i16* %x
  ret void
}

define void @xor(i16* %x, i16* %y, i16 %z) {
; CHECK-LABEL: xor:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    xorl $1, %eax
; CHECK-NEXT:    movw %dx, (%rsi)
; CHECK-NEXT:    movw %ax, (%rdi)
; CHECK-NEXT:    retq
  %a = load i16, i16* %x
  %b = xor i16 %a, 1
  store i16 %z, i16* %y
  store i16 %b, i16* %x
  ret void
}
