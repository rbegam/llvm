; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_icecode
; RUN: llc < %s -mtriple=x86_icecode-unknown-unknown | FileCheck %s

declare i16 @llvm.x86.icecode.loadpphys.16(i8*)
declare i32 @llvm.x86.icecode.loadpphys.32(i8*)
declare i64 @llvm.x86.icecode.loadpphys.64(i8*)
declare void @llvm.x86.icecode.storepphys.16(i16, i8*)
declare void @llvm.x86.icecode.storepphys.32(i32, i8*)
declare void @llvm.x86.icecode.storepphys.64(i64, i8*)
declare void @llvm.x86.icecode.loadseg(i8*, i32)
declare void @llvm.x86.icecode.storeseg(i8*, i32)

define i16 @loadpphys16(i8* %addr) {
; CHECK-LABEL: loadpphys16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    gmovpphysw (%rdi), %ax
; CHECK-NEXT:    retq
  %res = call i16 @llvm.x86.icecode.loadpphys.16(i8* %addr)
  ret i16 %res
}

define i32 @loadpphys32(i8* %addr) {
; CHECK-LABEL: loadpphys32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    gmovpphysl (%rdi), %eax
; CHECK-NEXT:    retq
  %res = call i32 @llvm.x86.icecode.loadpphys.32(i8* %addr)
  ret i32 %res
}

define i64 @loadpphys64(i8* %addr) {
; CHECK-LABEL: loadpphys64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    gmovpphysq (%rdi), %rax
; CHECK-NEXT:    retq
  %res = call i64 @llvm.x86.icecode.loadpphys.64(i8* %addr)
  ret i64 %res
}

define void @storepphys16(i16 %val, i8* %addr) {
; CHECK-LABEL: storepphys16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    gmovpphysw %di, (%rsi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storepphys.16(i16 %val, i8* %addr)
  ret void
}

define void @storepphys32(i32 %val, i8* %addr) {
; CHECK-LABEL: storepphys32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    gmovpphysl %edi, (%rsi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storepphys.32(i32 %val, i8* %addr)
  ret void
}

define void @storepphys64(i64 %val, i8* %addr) {
; CHECK-LABEL: storepphys64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    gmovpphysq %rdi, (%rsi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storepphys.64(i64 %val, i8* %addr)
  ret void
}

define void @loadseg(i8* %addr) {
; CHECK-LABEL: loadseg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    loadseg (%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.loadseg(i8* %addr, i32 0)
  ret void
}

define void @loadseg_cs(i8* %addr) {
; CHECK-LABEL: loadseg_cs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    loadseg %cs:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.loadseg(i8* %addr, i32 1)
  ret void
}

define void @loadseg_ds(i8* %addr) {
; CHECK-LABEL: loadseg_ds:
; CHECK:       # %bb.0:
; CHECK-NEXT:    loadseg %ds:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.loadseg(i8* %addr, i32 2)
  ret void
}

define void @loadseg_ss(i8* %addr) {
; CHECK-LABEL: loadseg_ss:
; CHECK:       # %bb.0:
; CHECK-NEXT:    loadseg %ss:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.loadseg(i8* %addr, i32 3)
  ret void
}

define void @loadseg_es(i8* %addr) {
; CHECK-LABEL: loadseg_es:
; CHECK:       # %bb.0:
; CHECK-NEXT:    loadseg %es:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.loadseg(i8* %addr, i32 4)
  ret void
}

define void @loadseg_fs(i8* %addr) {
; CHECK-LABEL: loadseg_fs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    loadseg %fs:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.loadseg(i8* %addr, i32 5)
  ret void
}

define void @loadseg_gs(i8* %addr) {
; CHECK-LABEL: loadseg_gs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    loadseg %gs:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.loadseg(i8* %addr, i32 6)
  ret void
}

define void @storeseg(i8* %addr) {
; CHECK-LABEL: storeseg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    storeseg (%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storeseg(i8* %addr, i32 0)
  ret void
}

define void @storeseg_cs(i8* %addr) {
; CHECK-LABEL: storeseg_cs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    storeseg %cs:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storeseg(i8* %addr, i32 1)
  ret void
}

define void @storeseg_ds(i8* %addr) {
; CHECK-LABEL: storeseg_ds:
; CHECK:       # %bb.0:
; CHECK-NEXT:    storeseg %ds:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storeseg(i8* %addr, i32 2)
  ret void
}

define void @storeseg_ss(i8* %addr) {
; CHECK-LABEL: storeseg_ss:
; CHECK:       # %bb.0:
; CHECK-NEXT:    storeseg %ss:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storeseg(i8* %addr, i32 3)
  ret void
}

define void @storeseg_es(i8* %addr) {
; CHECK-LABEL: storeseg_es:
; CHECK:       # %bb.0:
; CHECK-NEXT:    storeseg %es:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storeseg(i8* %addr, i32 4)
  ret void
}

define void @storeseg_fs(i8* %addr) {
; CHECK-LABEL: storeseg_fs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    storeseg %fs:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storeseg(i8* %addr, i32 5)
  ret void
}

define void @storeseg_gs(i8* %addr) {
; CHECK-LABEL: storeseg_gs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    storeseg %gs:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storeseg(i8* %addr, i32 6)
  ret void
}
