; thunk-flag.ll
;
; The intermediate code below was generated by running clang on this code:
; thunk-flag.cpp:
;   01 namespace Test1 {
;   02   struct A {
;   03     virtual void f();
;   04   };
;   05 
;   06   struct B {
;   07     virtual void f();
;   08   };
;   09 
;   10   struct C : A, B {
;   11     virtual void c();
;   12 
;   13     virtual void f();
;   14   };
;   15 
;   16   void C::f() { }
;   17 }
;
; Build command:
;   $ clang -cc1 thunk-flag.cpp -triple=x86_64-pc-windows-msvc -emit-llvm \
;       -debug-info-kind=limited -o debug-info-thunk-flag.ll
;
; NOTES:
;   This test should be invoking the static compiler and then dumping the
;   object file debug information to check for an S_THUNK32 symbol, but we
;   don't have a working dumping tool yet. For now, we just run opt across
;   the input to make sure the DIFlagThunk flag on DISubroutine entries can be
;   read correctly.
;
;   Eventually the flag is likely to be replaced with a DIThunk metadata entry
;   in the LLVm debug information. This would allow us to record 'this' pointer
;   offests, thunk targets, and additional information which is part of the
;   S_THUNK32 symbol. Right now this additional information doesn't appear to
;   be useful to Visual Studio so it is omitted and the design can be
;   simplified to this single subroutine flag.
;
; RUN: opt -S -debugger-tune=lldb %s | FileCheck %s
;
; CHECK: DISubprogram(linkageName: "\01?f@C@Test1@@W7EAAXXZ"{{.*}} flags: {{.*}}DIFlagThunk
;

; ModuleID = 'thunk-flag.cpp'
target datalayout = "e-m:w-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%"struct.Test1::C" = type { %"struct.Test1::A", %"struct.Test1::B" }
%"struct.Test1::A" = type { i32 (...)** }
%"struct.Test1::B" = type { i32 (...)** }

$"\01?f@C@Test1@@W7EAAXXZ" = comdat any

; Function Attrs: nounwind
define void @"\01?f@C@Test1@@UEAAXXZ"(%"struct.Test1::C"* %this) unnamed_addr #0 align 2 !dbg !4 {
entry:
  %this.addr = alloca %"struct.Test1::C"*, align 8
  store %"struct.Test1::C"* %this, %"struct.Test1::C"** %this.addr, align 8
  call void @llvm.dbg.declare(metadata %"struct.Test1::C"** %this.addr, metadata !16, metadata !18), !dbg !19
  %this1 = load %"struct.Test1::C"*, %"struct.Test1::C"** %this.addr, align 8
  ret void, !dbg !20
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
define linkonce_odr void @"\01?f@C@Test1@@W7EAAXXZ"(%"struct.Test1::C"* %this) unnamed_addr #0 comdat align 2 !dbg !12 {
entry:
  %this.addr = alloca %"struct.Test1::C"*, align 8
  store %"struct.Test1::C"* %this, %"struct.Test1::C"** %this.addr, align 8
  call void @llvm.dbg.declare(metadata %"struct.Test1::C"** %this.addr, metadata !21, metadata !18), !dbg !22
  %this1 = load %"struct.Test1::C"*, %"struct.Test1::C"** %this.addr, align 8, !dbg !23
  %0 = bitcast %"struct.Test1::C"* %this1 to i8*, !dbg !23
  %1 = getelementptr i8, i8* %0, i32 -8, !dbg !23
  %2 = bitcast i8* %1 to %"struct.Test1::C"*, !dbg !23
  tail call void @"\01?f@C@Test1@@UEAAXXZ"(%"struct.Test1::C"* %2), !dbg !23
  ret void, !dbg !23
}

attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-features"="+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!14}
!llvm.ident = !{!15}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: "clang version 3.8.0 (branches/dgi-xm 3706)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "<stdin>", directory: "/tmp")
!2 = !{}
!3 = !{!4, !12}
!4 = distinct !DISubprogram(name: "f", linkageName: "\01?f@C@Test1@@UEAAXXZ", scope: !6, file: !5, line: 35, type: !8, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, declaration: !11, variables: !2)
!5 = !DIFile(filename: "thunk-flag.cpp", directory: "/tmp")
!6 = !DICompositeType(tag: DW_TAG_structure_type, name: "C", scope: !7, file: !5, line: 29, size: 128, align: 64, flags: DIFlagFwdDecl)
!7 = !DINamespace(name: "Test1", scope: null, file: !5, line: 20)
!8 = !DISubroutineType(types: !9)
!9 = !{null, !10}
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64, align: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!11 = !DISubprogram(name: "f", linkageName: "\01?f@C@Test1@@UEAAXXZ", scope: !6, file: !5, line: 32, type: !8, isLocal: false, isDefinition: false, scopeLine: 32, containingType: !6, virtuality: DW_VIRTUALITY_virtual, flags: DIFlagPrototyped, isOptimized: false)
!12 = distinct !DISubprogram(linkageName: "\01?f@C@Test1@@W7EAAXXZ", scope: !5, file: !5, line: 35, type: !13, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagArtificial | DIFlagThunk, isOptimized: false, variables: !2)
!13 = !DISubroutineType(types: !2)
!14 = !{i32 2, !"Debug Info Version", i32 3}
!15 = !{!"clang version 3.8.0 (branches/dgi-xm 3706)"}
!16 = !DILocalVariable(name: "this", arg: 1, scope: !4, type: !17, flags: DIFlagArtificial | DIFlagObjectPointer)
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64, align: 64)
!18 = !DIExpression()
!19 = !DILocation(line: 0, scope: !4)
!20 = !DILocation(line: 35, scope: !4)
!21 = !DILocalVariable(name: "this", arg: 1, scope: !12, type: !17, flags: DIFlagArtificial | DIFlagObjectPointer)
!22 = !DILocation(line: 0, scope: !12)
!23 = !DILocation(line: 35, scope: !12)
