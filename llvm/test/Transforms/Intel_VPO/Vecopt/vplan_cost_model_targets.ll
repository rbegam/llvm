; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt < %s -S -VPlanDriver  -mtriple=x86_64-unknown-unknown -mattr=+avx2 \
; RUN:     -vplan-cost-model-print-analysis-for-vf=8 -disable-output \
; RUN:     | FileCheck %s --check-prefix=VPLAN-CM-AVX2

; RUN: opt < %s -S -VPlanDriver  -mtriple=x86_64-unknown-unknown -mattr=+sse2 \
; RUN:     -vplan-cost-model-print-analysis-for-vf=8 -disable-output \
; RUN:     | FileCheck %s --check-prefix=VPLAN-CM-SSE2

; RUN: opt < %s -hir-ssa-deconstruction -hir-vec-dir-insert -VPlanDriverHIR \
; RUN:     -mtriple=x86_64-unknown-unknown -mattr=+avx2 \
; RUN:     -disable-output -vplan-cost-model-print-analysis-for-vf=8 \
; RUN:     | FileCheck %s --check-prefix=VPLAN-HIR-CM-AVX2

; RUN: opt < %s -hir-ssa-deconstruction -hir-vec-dir-insert -VPlanDriverHIR \
; RUN:     -mtriple=x86_64-unknown-unknown -mattr=+sse2 \
; RUN:     -disable-output -vplan-cost-model-print-analysis-for-vf=8 \
; RUN:     | FileCheck %s --check-prefix=VPLAN-HIR-CM-SSE2

; RUN: opt < %s -S -VPlanDriver  -mtriple=x86_64-unknown-unknown -mattr=+avx2 \
; RUN:     -vplan-force-vf=8 -instcombine -simplifycfg  -cost-model -analyze \
; RUN:     | FileCheck %s --check-prefix=LLVM-CM-AVX2

; RUN: opt < %s -S -VPlanDriver  -mtriple=x86_64-unknown-unknown -mattr=+sse2 \
; RUN:     -vplan-force-vf=8 -instcombine -simplifycfg  -cost-model -analyze \
; RUN:     | FileCheck %s --check-prefix=LLVM-CM-SSE2


; Verify that we properly use the target ISA when doing cost modelling.
; In this test the cost vector icmp differs significantly between sse2/avx2.

@arr.i64.1 = common local_unnamed_addr global [1024 x i64] zeroinitializer, align 16
@arr.i64.2 = common local_unnamed_addr global [1024 x i64] zeroinitializer, align 16
@arr.i64.3 = common local_unnamed_addr global [1024 x i64] zeroinitializer, align 16

define void @foo() local_unnamed_addr {
; VPLAN-CM-AVX2-LABEL:  Cost Model for VPlan  with VF = 8:
; VPLAN-CM-AVX2-NEXT:  Total Cost: 69
; VPLAN-CM-AVX2-NEXT:  Analyzing VPBasicBlock [[BB0:BB[0-9]+]], total cost: 0
; VPLAN-CM-AVX2-NEXT:  Analyzing VPBasicBlock [[BB1:BB[0-9]+]], total cost: 0
; VPLAN-CM-AVX2-NEXT:  Analyzing VPBasicBlock [[BB2:BB[0-9]+]], total cost: 69
; VPLAN-CM-AVX2-NEXT:    Unknown cost for [[VP1:%.*]] = phi [ i64 0, [[BBH:.*]] ], [ [[VP2:%.*]], [[BBL:.*]] ]
; VPLAN-CM-AVX2-NEXT:    Cost 0 for [[VP3:%.*]] = getelementptr [1024 x i64]* @arr.i64.1 i64 0 [[VP1]]
; VPLAN-CM-AVX2-NEXT:    Cost 16 for [[VP4:%.*]] = load [[VP3]]
; VPLAN-CM-AVX2-NEXT:    Cost 0 for [[VP5:%.*]] = getelementptr [1024 x i64]* @arr.i64.3 i64 0 [[VP1]]
; VPLAN-CM-AVX2-NEXT:    Cost 16 for [[VP6:%.*]] = load [[VP5]]
; VPLAN-CM-AVX2-NEXT:    Cost 2 for [[VP7:%.*]] = icmp [[VP4]] [[VP6]]
; VPLAN-CM-AVX2-NEXT:    Cost 7 for [[VP8:%.*]] = zext [[VP7]]
; VPLAN-CM-AVX2-NEXT:    Cost 0 for [[VP9:%.*]] = getelementptr [1024 x i64]* @arr.i64.2 i64 0 [[VP1]]
; VPLAN-CM-AVX2-NEXT:    Cost 24 for store [[VP8]] [[VP9]]
; VPLAN-CM-AVX2-NEXT:    Cost 2 for [[VP2]] = add [[VP1]] i64 1
; VPLAN-CM-AVX2-NEXT:    Cost 2 for [[VP10:%.*]] = icmp [[VP2]] i64 1024
; VPLAN-CM-AVX2-NEXT:  Analyzing VPBasicBlock [[BB3:BB[0-9]+]], total cost: 0
; VPLAN-CM-AVX2-NEXT:  Analyzing VPBasicBlock [[BB4:BB[0-9]+]], total cost: 0
; VPLAN-CM-AVX2-NEXT:  Analyzing VPBasicBlock [[BB5:BB[0-9]+]], total cost: 0
;
; VPLAN-CM-SSE2-LABEL:  Cost Model for VPlan  with VF = 8:
; VPLAN-CM-SSE2-NEXT:  Total Cost: 131
; VPLAN-CM-SSE2-NEXT:  Analyzing VPBasicBlock [[BB0:BB[0-9]+]], total cost: 0
; VPLAN-CM-SSE2-NEXT:  Analyzing VPBasicBlock [[BB1:BB[0-9]+]], total cost: 0
; VPLAN-CM-SSE2-NEXT:  Analyzing VPBasicBlock [[BB2:BB[0-9]+]], total cost: 131
; VPLAN-CM-SSE2-NEXT:    Unknown cost for [[VP1:%.*]] = phi [ i64 0, [[BBH:.*]] ], [ [[VP2:%.*]], [[BBL:.*]] ]
; VPLAN-CM-SSE2-NEXT:    Cost 0 for [[VP3:%.*]] = getelementptr [1024 x i64]* @arr.i64.1 i64 0 [[VP1]]
; VPLAN-CM-SSE2-NEXT:    Cost 16 for [[VP4:%.*]] = load [[VP3]]
; VPLAN-CM-SSE2-NEXT:    Cost 0 for [[VP5:%.*]] = getelementptr [1024 x i64]* @arr.i64.3 i64 0 [[VP1]]
; VPLAN-CM-SSE2-NEXT:    Cost 16 for [[VP6:%.*]] = load [[VP5]]
; VPLAN-CM-SSE2-NEXT:    Cost 32 for [[VP7:%.*]] = icmp [[VP4]] [[VP6]]
; VPLAN-CM-SSE2-NEXT:    Cost 7 for [[VP8:%.*]] = zext [[VP7]]
; VPLAN-CM-SSE2-NEXT:    Cost 0 for [[VP9:%.*]] = getelementptr [1024 x i64]* @arr.i64.2 i64 0 [[VP1]]
; VPLAN-CM-SSE2-NEXT:    Cost 24 for store [[VP8]] [[VP9]]
; VPLAN-CM-SSE2-NEXT:    Cost 4 for [[VP2]] = add [[VP1]] i64 1
; VPLAN-CM-SSE2-NEXT:    Cost 32 for [[VP10:%.*]] = icmp [[VP2]] i64 1024
; VPLAN-CM-SSE2-NEXT:  Analyzing VPBasicBlock [[BB3:BB[0-9]+]], total cost: 0
; VPLAN-CM-SSE2-NEXT:  Analyzing VPBasicBlock [[BB4:BB[0-9]+]], total cost: 0
; VPLAN-CM-SSE2-NEXT:  Analyzing VPBasicBlock [[BB5:BB[0-9]+]], total cost: 0
;
; VPLAN-HIR-CM-AVX2-LABEL:  HIR Cost Model for VPlan  with VF = 8:
; VPLAN-HIR-CM-AVX2-NEXT:  Total Cost: 8
; VPLAN-HIR-CM-AVX2-NEXT:  Analyzing VPBasicBlock [[BB0:BB[0-9]+]], total cost: 0
; VPLAN-HIR-CM-AVX2-NEXT:  Analyzing VPBasicBlock [[BB1:BB[0-9]+]], total cost: 0
; VPLAN-HIR-CM-AVX2-NEXT:  Analyzing VPBasicBlock [[BB2:BB[0-9]+]], total cost: 8
; VPLAN-HIR-CM-AVX2-NEXT:    Unknown cost for [[VP0:%.*]] = semi-phi i64 0 [[VP1:%.*]]
; VPLAN-HIR-CM-AVX2-NEXT:    Cost 2 for [[VP2:%.*]] = load [[VP3:%.*]]
; VPLAN-HIR-CM-AVX2-NEXT:    Cost 2 for [[VP4:%.*]] = load [[VP5:%.*]]
; VPLAN-HIR-CM-AVX2-NEXT:    Cost 2 for [[VP6:%.*]] = icmp [[VP2]] [[VP4]]
; VPLAN-HIR-CM-AVX2-NEXT:    Unknown cost for [[VP7:%.*]] = zext [[VP6]]
; VPLAN-HIR-CM-AVX2-NEXT:    Cost 2 for store [[VP7]] [[VP8:%.*]]
; VPLAN-HIR-CM-AVX2-NEXT:    Unknown cost for [[VP1]] = add [[VP0]] i64 1
; VPLAN-HIR-CM-AVX2-NEXT:    Unknown cost for [[VP9:%.*]] = icmp [[VP1]] i64 1023
; VPLAN-HIR-CM-AVX2-NEXT:  Analyzing VPBasicBlock [[BB3:BB[0-9]+]], total cost: 0
; VPLAN-HIR-CM-AVX2-NEXT:  Analyzing VPBasicBlock [[BB4:BB[0-9]+]], total cost: 0
; VPLAN-HIR-CM-AVX2-NEXT:  Analyzing VPBasicBlock [[BB5:BB[0-9]+]], total cost: 0
;
; VPLAN-HIR-CM-SSE2-LABEL:  HIR Cost Model for VPlan  with VF = 8:
; VPLAN-HIR-CM-SSE2-NEXT:  Total Cost: 44
; VPLAN-HIR-CM-SSE2-NEXT:  Analyzing VPBasicBlock [[BB0:BB[0-9]+]], total cost: 0
; VPLAN-HIR-CM-SSE2-NEXT:  Analyzing VPBasicBlock [[BB1:BB[0-9]+]], total cost: 0
; VPLAN-HIR-CM-SSE2-NEXT:  Analyzing VPBasicBlock [[BB2:BB[0-9]+]], total cost: 44
; VPLAN-HIR-CM-SSE2-NEXT:    Unknown cost for [[VP0:%.*]] = semi-phi i64 0 [[VP1:%.*]]
; VPLAN-HIR-CM-SSE2-NEXT:    Cost 4 for [[VP2:%.*]] = load [[VP3:%.*]]
; VPLAN-HIR-CM-SSE2-NEXT:    Cost 4 for [[VP4:%.*]] = load [[VP5:%.*]]
; VPLAN-HIR-CM-SSE2-NEXT:    Cost 32 for [[VP6:%.*]] = icmp [[VP2]] [[VP4]]
; VPLAN-HIR-CM-SSE2-NEXT:    Unknown cost for [[VP7:%.*]] = zext [[VP6]]
; VPLAN-HIR-CM-SSE2-NEXT:    Cost 4 for store [[VP7]] [[VP8:%.*]]
; VPLAN-HIR-CM-SSE2-NEXT:    Unknown cost for [[VP1]] = add [[VP0]] i64 1
; VPLAN-HIR-CM-SSE2-NEXT:    Unknown cost for [[VP9:%.*]] = icmp [[VP1]] i64 1023
; VPLAN-HIR-CM-SSE2-NEXT:  Analyzing VPBasicBlock [[BB3:BB[0-9]+]], total cost: 0
; VPLAN-HIR-CM-SSE2-NEXT:  Analyzing VPBasicBlock [[BB4:BB[0-9]+]], total cost: 0
; VPLAN-HIR-CM-SSE2-NEXT:  Analyzing VPBasicBlock [[BB5:BB[0-9]+]], total cost: 0
;
; LLVM-CM-AVX2-LABEL:  Printing analysis 'Cost Model Analysis' for function 'foo':
; LLVM-CM-AVX2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   br label [[VECTOR_BODY:%.*]]
; LLVM-CM-AVX2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   [[INDEX:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; LLVM-CM-AVX2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   [[GEP_INDVAR:%.*]] = getelementptr inbounds [1024 x i64], [1024 x i64]* @arr.i64.1, i64 0, i64 [[INDEX]]
; LLVM-CM-AVX2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   [[TMP0:%.*]] = bitcast i64* [[GEP_INDVAR]] to <8 x i64>*
; LLVM-CM-AVX2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction:   [[WIDE_LOAD:%.*]] = load <8 x i64>, <8 x i64>* [[TMP0]], align 16
; LLVM-CM-AVX2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   [[GEP_INDVAR1:%.*]] = getelementptr inbounds [1024 x i64], [1024 x i64]* @arr.i64.3, i64 0, i64 [[INDEX]]
; LLVM-CM-AVX2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   [[TMP1:%.*]] = bitcast i64* [[GEP_INDVAR1]] to <8 x i64>*
; LLVM-CM-AVX2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction:   [[WIDE_LOAD2:%.*]] = load <8 x i64>, <8 x i64>* [[TMP1]], align 16
; LLVM-CM-AVX2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction:   [[TMP2:%.*]] = icmp sge <8 x i64> [[WIDE_LOAD]], [[WIDE_LOAD2]]
; LLVM-CM-AVX2-NEXT:  Cost Model: Found an estimated cost of 7 for instruction:   [[TMP3:%.*]] = zext <8 x i1> [[TMP2]] to <8 x i64>
; LLVM-CM-AVX2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   [[TMP4:%.*]] = getelementptr inbounds [1024 x i64], [1024 x i64]* @arr.i64.2, i64 0, i64 [[INDEX]]
; LLVM-CM-AVX2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   [[TMP5:%.*]] = bitcast i64* [[TMP4]] to <8 x i64>*
; LLVM-CM-AVX2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction:   store <8 x i64> [[TMP3]], <8 x i64>* [[TMP5]], align 16
; LLVM-CM-AVX2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction:   [[INDEX_NEXT]] = add i64 [[INDEX]], 8
; LLVM-CM-AVX2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction:   [[TMP6:%.*]] = icmp eq i64 [[INDEX_NEXT]], 1024
; LLVM-CM-AVX2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   br i1 [[TMP6]], label [[FOR_END:%.*]], label [[VECTOR_BODY]]
; LLVM-CM-AVX2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   ret void
;
; LLVM-CM-SSE2-LABEL:  Printing analysis 'Cost Model Analysis' for function 'foo':
; LLVM-CM-SSE2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   br label [[VECTOR_BODY:%.*]]
; LLVM-CM-SSE2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   [[INDEX:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; LLVM-CM-SSE2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   [[GEP_INDVAR:%.*]] = getelementptr inbounds [1024 x i64], [1024 x i64]* @arr.i64.1, i64 0, i64 [[INDEX]]
; LLVM-CM-SSE2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   [[TMP0:%.*]] = bitcast i64* [[GEP_INDVAR]] to <8 x i64>*
; LLVM-CM-SSE2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction:   [[WIDE_LOAD:%.*]] = load <8 x i64>, <8 x i64>* [[TMP0]], align 16
; LLVM-CM-SSE2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   [[GEP_INDVAR1:%.*]] = getelementptr inbounds [1024 x i64], [1024 x i64]* @arr.i64.3, i64 0, i64 [[INDEX]]
; LLVM-CM-SSE2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   [[TMP1:%.*]] = bitcast i64* [[GEP_INDVAR1]] to <8 x i64>*
; LLVM-CM-SSE2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction:   [[WIDE_LOAD2:%.*]] = load <8 x i64>, <8 x i64>* [[TMP1]], align 16
; LLVM-CM-SSE2-NEXT:  Cost Model: Found an estimated cost of 32 for instruction:   [[TMP2:%.*]] = icmp sge <8 x i64> [[WIDE_LOAD]], [[WIDE_LOAD2]]
; LLVM-CM-SSE2-NEXT:  Cost Model: Found an estimated cost of 7 for instruction:   [[TMP3:%.*]] = zext <8 x i1> [[TMP2]] to <8 x i64>
; LLVM-CM-SSE2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   [[TMP4:%.*]] = getelementptr inbounds [1024 x i64], [1024 x i64]* @arr.i64.2, i64 0, i64 [[INDEX]]
; LLVM-CM-SSE2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   [[TMP5:%.*]] = bitcast i64* [[TMP4]] to <8 x i64>*
; LLVM-CM-SSE2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction:   store <8 x i64> [[TMP3]], <8 x i64>* [[TMP5]], align 16
; LLVM-CM-SSE2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction:   [[INDEX_NEXT]] = add i64 [[INDEX]], 8
; LLVM-CM-SSE2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction:   [[TMP6:%.*]] = icmp eq i64 [[INDEX_NEXT]], 1024
; LLVM-CM-SSE2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   br i1 [[TMP6]], label [[FOR_END:%.*]], label [[VECTOR_BODY]]
; LLVM-CM-SSE2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction:   ret void
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]

  %ld.idx = getelementptr inbounds [1024 x i64], [1024 x i64]* @arr.i64.1, i64 0, i64 %indvars.iv
  %ld = load i64, i64* %ld.idx

  %ld2.idx = getelementptr inbounds [1024 x i64], [1024 x i64]* @arr.i64.3, i64 0, i64 %indvars.iv
  %ld2 = load i64, i64* %ld2.idx

  %cmp = icmp sge i64 %ld, %ld2
  %cmp_to_i64 = zext i1 %cmp to i64

  %st.idx = getelementptr inbounds [1024 x i64], [1024 x i64]* @arr.i64.2, i64 0, i64 %indvars.iv
  store i64 %cmp_to_i64, i64* %st.idx

  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 1024
  br i1 %exitcond, label %for.end, label %for.body

for.end:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  ret void
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

attributes #1 = { nounwind }
