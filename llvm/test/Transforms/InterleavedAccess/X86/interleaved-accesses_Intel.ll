; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -mtriple=x86_64-pc-linux  -mattr=+avx -interleaved-access -S | FileCheck %s

; We created a seperate file under Intel to test if these interleaved accesses get
; optimized by OptVLS. These tests pass if OptVLS successfully generates the optimized
; seuqence and lowerInterleavedLoad/Store as a client successfully communicates with OptVLS.

define <4 x double> @load_factorf64_4(<8 x double>* %ptr) {
; CHECK-LABEL: @load_factorf64_4(
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x double>* %ptr to <4 x double>*
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds <4 x double>, <4 x double>* [[TMP1]], i32 0
; CHECK-NEXT:    [[TMP3:%.*]] = load <4 x double>, <4 x double>* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <8 x double>* %ptr to <4 x double>*
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds <4 x double>, <4 x double>* [[TMP4]], i32 1
; CHECK-NEXT:    [[TMP6:%.*]] = load <4 x double>, <4 x double>* [[TMP5]], align 16
; CHECK-NEXT:    [[TMP7:%.*]] = shufflevector <4 x double> [[TMP3]], <4 x double> [[TMP6]], <4 x i32> <i32 0, i32 1, i32 4, i32 5>
; CHECK-NEXT:    [[TMP8:%.*]] = shufflevector <4 x double> [[TMP3]], <4 x double> [[TMP6]], <4 x i32> <i32 2, i32 3, i32 6, i32 7>
; CHECK-NEXT:    [[TMP9:%.*]] = shufflevector <4 x double> [[TMP7]], <4 x double> [[TMP8]], <4 x i32> <i32 0, i32 4, i32 2, i32 6>
; CHECK-NEXT:    [[TMP10:%.*]] = shufflevector <4 x double> [[TMP7]], <4 x double> [[TMP8]], <4 x i32> <i32 1, i32 5, i32 3, i32 7>
; CHECK-NEXT:    [[ADD1:%.*]] = fadd <4 x double> [[TMP10]], [[TMP10]]
; CHECK-NEXT:    ret <4 x double> [[ADD1]]
;
  %wide.vec = load <8 x double>, <8 x double>* %ptr, align 16
  %strided.v1 = shufflevector <8 x double> %wide.vec, <8 x double> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.v2 = shufflevector <8 x double> %wide.vec, <8 x double> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %add1 = fadd <4 x double> %strided.v1, %strided.v1
  ret <4 x double> %add1
}
